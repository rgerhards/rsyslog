# Copyright 2025 Rainer Gerhards and Others
#
# https://github.com/rsyslog/rsyslog
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
name: test omclickhouse

on:
  workflow_dispatch:
  push:
    paths:
      - 'plugins/omclickhouse/**'
      - 'tests/clickhouse-*.sh'
      - 'tests/diag.sh'
      - 'devtools/prepare_clickhouse.sh'
      - '.github/workflows/omclickhouse.yml'
  pull_request:
    paths:
      - 'plugins/omclickhouse/**'
      - 'tests/clickhouse-*.sh'
      - 'tests/diag.sh'
      - 'devtools/prepare_clickhouse.sh'
      - '.github/workflows/omclickhouse.yml'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  omclickhouse:
    runs-on: ubuntu-latest
    timeout-minutes: 40
    services:
      clickhouse:
        image: clickhouse/clickhouse-server:24.8-alpine
        ports:
          - 8123:8123
        options: >-
          --health-cmd "clickhouse-client --query 'SELECT 1'"
          --health-interval 5s
          --health-retries 12
          --health-timeout 5s
    steps:
      - name: git checkout project
        uses: actions/checkout@v4

      - name: install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            lcov \
            clang-tools \
            curl \
            cmake-curses-gui \
            python3-dev \
            ruby-dev \
            python3-sphinx \
            default-jre-headless \
            faketime \
            libdbd-mysql \
            gdb \
            libaprutil1-dev \
            libbson-dev \
            libcivetweb-dev \
            libcap-ng-dev \
            libcap-ng0 \
            libcurl4-gnutls-dev \
            libdbi-dev \
            libgcrypt20-dev \
            libglib2.0-dev \
            libgnutls28-dev \
            libhiredis-dev \
            libkrb5-dev \
            liblz4-dev \
            libmaxminddb-dev libmongoc-dev \
            libmongoc-dev \
            libmysqlclient-dev \
            libnet1-dev \
            libpcap-dev \
            librabbitmq-dev \
            libsnmp-dev \
            libssl-dev libsasl2-dev libsasl2-2 libsasl2-modules \
            libsystemd-dev \
            libtirpc-dev \
            libtokyocabinet-dev \
            libtool \
            libtool-bin \
            libzstd-dev \
            mysql-server \
            net-tools \
            postgresql-client libpq-dev \
            python3-docutils  \
            python3-pip \
            python3-pysnmp4 \
            software-properties-common \
            uuid-dev \
            valgrind \
            zlib1g-dev \
            libestr-dev \
            libfastjson-dev \
            librdkafka-dev \
            libfastjson-dev \
            librelp-dev \
            liblognorm-dev \
            libczmq-dev \
            tcl-dev \
            libsodium-dev \
            cmake \
            autoconf \
            automake \
            pkg-config \
            flex \
            bison \
            build-essential

      - name: configure clickhouse client access
        run: |
          echo "CLICKHOUSE_CLIENT=docker exec ${{ job.services.clickhouse.id }} clickhouse-client" >> "$GITHUB_ENV"
          echo "CLICKHOUSE_SERVER=127.0.0.1" >> "$GITHUB_ENV"
          echo "CLICKHOUSE_HTTP_PORT=8123" >> "$GITHUB_ENV"
          echo "CLICKHOUSE_USE_HTTPS_DEFAULT=off" >> "$GITHUB_ENV"
          echo "CLICKHOUSE_START_CMD=" >> "$GITHUB_ENV"
          echo "CLICKHOUSE_STOP_CMD=" >> "$GITHUB_ENV"

      - name: wait for clickhouse service
        run: |
          for attempt in $(seq 1 30); do
            if docker exec ${{ job.services.clickhouse.id }} clickhouse-client --query 'SELECT 1' >/dev/null 2>&1; then
              exit 0
            fi
            sleep 2
          done
          echo "ClickHouse service did not become ready" >&2
          exit 1

      - name: bootstrap
        run: autoreconf -fvi

      - name: configure
        run: |
          ./configure \
            --enable-compile-warning=error \
            --enable-clickhouse \
            --enable-clickhouse-tests=no \
            --disable-elasticsearch \
            --disable-elasticsearch-tests \
            --disable-ffaup \
            --enable-gnutls \
            --enable-gssapi-krb5 \
            --enable-imbatchreport \
            --enable-imczmq \
            --enable-imdiag \
            --enable-imdocker \
            --disable-imdocker-tests \
            --enable-imfile \
            --enable-imhttp \
            --enable-imjournal \
            --disable-imkafka \
            --disable-omkafka \
            --enable-impstats \
            --enable-impcap \
            --enable-imptcp \
            --disable-kafka-tests \
            --disable-ksi-ls12 \
            --enable-libdbi \
            --enable-libfaketime \
            --enable-libgcrypt \
            --enable-libzstd \
            --enable-mail \
            --enable-mmanon \
            --enable-mmaudit \
            --enable-mmcapture \
            --enable-mmcount \
            --enable-mmdarwin \
            --enable-mmdblookup \
            --enable-mmfields \
            --enable-mmjsonparse \
            --enable-mmkubernetes \
            --enable-mmnormalize \
            --enable-mmpstrucdata \
            --enable-mmrm1stspace \
            --enable-mmsequence \
            --enable-mmsnmptrapd \
            --enable-mmutf8fix \
            --disable-mysql \
            --disable-mysql-tests \
            --disable-omamqp1 \
            --enable-omczmq \
            --enable-omhiredis \
            --enable-omhiredis \
            --enable-omhttpfs \
            --enable-omhttp \
            --enable-omjournal \
            --disable-omkafka \
            --enable-ommongodb \
            --enable-omprog \
            --enable-omrabbitmq \
            --enable-omrelp-default-port=13515 \
            --enable-omruleset \
            --enable-omsendertrack \
            --enable-omstdout \
            --enable-omtcl \
            --enable-omudpspoof \
            --enable-omuxsock \
            --enable-openssl \
            --enable-pgsql \
            --enable-pmaixforwardedfrom \
            --enable-pmciscoios \
            --enable-pmcisconames \
            --enable-pmlastmsg \
            --enable-pmnormalize \
            --enable-pmnull \
            --enable-pmsnare \
            --enable-relp \
            --disable-snmp \
            --disable-snmp-tests \
            --enable-usertools \
            --enable-imdtls \
            --enable-omdtls \
            --enable-mmaitag \
            --enable-valgrind \
            --enable-testbench \
            --disable-uuid

      - name: build
        run: make -j"$(nproc)"

      - name: run clickhouse tests
        env:
          TESTS: >-
            clickhouse-start.sh clickhouse-basic.sh clickhouse-dflt-tpl.sh
            clickhouse-retry-error.sh clickhouse-load.sh clickhouse-bulk.sh
            clickhouse-bulk-load.sh clickhouse-limited-batch.sh
            clickhouse-select.sh clickhouse-errorfile.sh
            clickhouse-wrong-quotation-marks.sh
            clickhouse-wrong-template-option.sh
            clickhouse-wrong-insert-syntax.sh clickhouse-stop.sh
        run: |
          make check TESTS="$TESTS" VERBOSE=1

      - name: gather logs on failure
        if: ${{ failure() || cancelled() }}
        run: |
          find tests -maxdepth 1 -name '*.log' -print -exec cat {} \;
